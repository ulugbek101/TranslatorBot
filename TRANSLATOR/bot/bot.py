import googletrans
import telebot
from telebot import custom_filters
from telebot.storage import StateMemoryStorage

from forms import WordTranslateState
from keyboards import (generate_main_menu, generate_lang_menu, generate_cancel_any_state_btn, generate_save_word_button,
                       generate_words_keyboard, generate_alphabetical_menu)
from tools import save_word, clear_all_words, get_users_words, get_word

store2 = StateMemoryStorage()
TOKEN = "5361952560:AAHVi1TXpbsx394JxlaY8LreiBgajZD4ZQA"
bot = telebot.TeleBot(TOKEN, state_storage=store2)
translator = googletrans.Translator()
import sqlite3


@bot.message_handler(commands='start')
def start(message):
    bot.reply_to(message, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}", reply_markup=generate_main_menu())


@bot.message_handler(func=lambda message: "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫" in message.text)
def translation_start(message):
    bot.set_state(message.from_user.id, WordTranslateState.to_lang, message.chat.id)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ", reply_markup=generate_lang_menu())


@bot.message_handler(state="*", commands='cancel')
@bot.message_handler(func=lambda message: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" == message.text)
def cancel_any_state(message):
    bot.send_message(chat_id=message.chat.id, text="‚ùé –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=generate_main_menu())
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda call: "translating_to" in call.data)
def save_translating_lang(call):
    _, to, translating_lang = call.data.split("_")
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        data['to_lang'] = translating_lang
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.set_state(call.from_user.id, WordTranslateState.word, call.message.chat.id)
    bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
                     reply_markup=generate_cancel_any_state_btn())


@bot.message_handler(state=WordTranslateState.word)
def save_translating_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['word'] = message.text
        to_lang = data['to_lang']
        word = data['word']

    detected_lang = translator.detect(text=word.lower()).__getattribute__("lang")

    translated_word = translator.translate(src=detected_lang, dest=to_lang, text=word).text
    bot.send_message(message.from_user.id,
                     text=f"<b>–°–ª–æ–≤–æ: </b>{word.capitalize()}\n<b>–ü–µ—Ä–µ–≤–æ–¥: </b>{translated_word}",
                     reply_markup=generate_save_word_button(word=f"{word.lower()} -- {translated_word.lower()}"),
                     parse_mode="HTML")
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(func=lambda message: "–°–ª–æ–≤–∞—Ä—å" == message.text)
def show_alphabet_letters(message):
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–æ–π –±—É–∫–≤—ã\n–í—ã–±–µ—Ä–∏—Ç–µ "–í—Å–µ —Å–ª–æ–≤–∞", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞',
                     reply_markup=generate_alphabetical_menu())


@bot.callback_query_handler(func=lambda call: "str_letter" in call.data)
def show_all_users_words(call):
    letter = call.data.split("_")[2]
    if letter == "0":
        words = get_users_words(call.message.chat.id)
        if len(words) == 0:
            bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç !", reply_markup=generate_main_menu())
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            msg = "--- –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤: ---\n\n"
            i = 0
            for word in sorted(get_users_words(call.message.chat.id)):
                i += 1
                msg += f"{i}) {word.capitalize()}\n"
            bot.send_message(chat_id=call.message.chat.id, text=msg,
                             reply_markup=generate_words_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        words = sorted([word for word in get_users_words(call.message.chat.id) if word[0].lower() == letter.lower()])
        if len(words) == 0:
            bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç !", reply_markup=generate_main_menu())
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            msg = "--- –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤: ---\n\n"
            i = 0
            for word in words:
                i += 1
                msg += f"{i}) {word.capitalize()}\n"
            bot.send_message(chat_id=call.message.chat.id, text=msg,
                             reply_markup=generate_words_keyboard())


@bot.message_handler(func=lambda message: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤" == message.text)
def clear_user_words(message):
    clear_all_words(message.chat.id)
    bot.send_message(chat_id=message.chat.id, text="–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω !",
                     reply_markup=generate_main_menu())


@bot.callback_query_handler(func=lambda call: "save" in call.data)
def save_user_word(call):
    chat_id = call.message.chat.id
    word = call.data.split("_")[1]
    is_word_on_db = get_word(call.message.chat.id, word)
    if is_word_on_db is None:
        save_word(call.message.chat.id, f"{call.from_user.first_name} {call.from_user.last_name}", word)
        bot.answer_callback_query(call.id, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ !")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", reply_markup=generate_main_menu())
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.message.chat.id, "–°–ª–æ–≤–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤ !")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", reply_markup=generate_main_menu())
        # bot.delete_message(call.id, call.message.message_id)


@bot.message_handler()
def return_to_main_menu(message):
    if "‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" == message.text:
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=generate_main_menu())
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòë")


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling()
